name: Deploy to Fly.io
on:
  push:
    branches:
      - main

jobs:
  cleanup-old-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0

  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          echo 'export FLYCTL_INSTALL="/home/runner/.fly"' >> ~/.bashrc
          echo 'export PATH="$FLYCTL_INSTALL/bin:$PATH"' >> ~/.bashrc
          source ~/.bashrc
          
          curl https://rclone.org/install.sh | sudo bash
          sudo apt-get update && sudo apt-get install -y jq gh

      - name: Authenticate Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          flyctl auth whoami || flyctl auth login --access-token "${{ secrets.FLY_API_TOKEN }}"

  compose-application:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build & Push Docker Image
        env:
          FLY_APP_NAME: ${{ secrets.FLY_APP_NAME }}
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          
          echo "ðŸ”„ Pushing image to Fly.io registry..."
          docker build -t registry.fly.io/$FLY_APP_NAME:latest .
          docker push registry.fly.io/$FLY_APP_NAME:latest

      - name: Ensure Volume Exists
        id: check-volume
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          EXISTING_VOLUME=$(flyctl volumes list --json | jq -r '.[] | select(.name=="film_volume") | sort_by(.created_at) | last | .id')
          if [ -z "$EXISTING_VOLUME" ]; then
            echo "ðŸ“¦ Volume belum ada, membuat baru di region SIN..."
            NEW_VOLUME=$(flyctl volumes create film_volume --size 5 --region sin --yes | awk '/ID:/ {print $2}')
            echo "VOLUME_ID=$NEW_VOLUME" >> $GITHUB_ENV
            sleep 10  # Tunggu agar volume benar-benar tersedia
          else
            echo "âœ… Volume sudah ada: $EXISTING_VOLUME"
            echo "VOLUME_ID=$EXISTING_VOLUME" >> $GITHUB_ENV
          fi

  deploy-application:
    runs-on: ubuntu-latest
    needs: compose-application
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Deploy Application
        env:
          FLY_APP_NAME: ${{ secrets.FLY_APP_NAME }}
          VOLUME_ID: ${{ env.VOLUME_ID }}
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          echo "ðŸš€ Deploying to Fly.io..."
          flyctl deploy --remote-only --strategy immediate --regions sin

      - name: Restart Application
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          echo "ðŸ”„ Restarting Fly.io App"
          flyctl machines restart --app $FLY_APP_NAME

  finish-deployment:
    runs-on: ubuntu-latest
    needs: deploy-application
    steps:
      - name: Send Telegram Notification
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
               -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
               -d "text=âœ… Deployment sukses! Aplikasi telah diperbarui dan berjalan di Fly.io ðŸš€"

      - name: Schedule Volume Check
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          flyctl ssh console --command "bash /scripts/extend_volume.sh"
