name: Deploy to Fly.io
on:
  push:
    branches:
      - main

jobs:
  cleanup-old-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.HAPUS_REPO_TOKEN }}  # Ganti dengan token personal GitHub
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 1

  deploy-application:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          echo 'export FLYCTL_INSTALL="/home/runner/.fly"' >> ~/.bashrc
          echo 'export PATH="$FLYCTL_INSTALL/bin:$PATH"' >> ~/.bashrc
          source ~/.bashrc

          curl https://rclone.org/install.sh | sudo bash
          sudo apt-get update && sudo apt-get install -y jq gh

      - name: Authenticate Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          export FLY_ACCESS_TOKEN="${{ secrets.FLY_API_TOKEN }}"
          echo "FLY_ACCESS_TOKEN=${{ secrets.FLY_API_TOKEN }}" >> $GITHUB_ENV
          flyctl auth whoami || flyctl auth login --access-token "${{ secrets.FLY_API_TOKEN }}"

      - name: Authenticate with Fly.io Registry
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "${{ secrets.FLY_API_TOKEN }}" | docker login registry.fly.io -u "x" --password-stdin

      - name: Ensure Fly.io Authenticated
        run: |
          if [ -z "$FLY_ACCESS_TOKEN" ]; then
            echo "‚ùå FLY_ACCESS_TOKEN tidak tersedia! Pastikan sudah diatur di GitHub Secrets."
            exit 1
          else
            echo "‚úÖ Fly.io Authentication is set."
          fi

      - name: Build & Push Docker Image
        env:
          FLY_APP_NAME: ${{ secrets.FLY_APP_NAME }}
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          
          echo "üîÑ Pushing image to Fly.io registry..."
          docker build -t registry.fly.io/$FLY_APP_NAME:latest .
          docker push registry.fly.io/$FLY_APP_NAME:latest

      - name: Ensure Volume Exists
        id: check-volume
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"

          echo "üîç Mencari volume yang tersedia..."
          EXISTING_VOLUME=$(flyctl volumes list --json | jq -r '[.[] | select(.name=="film_volume")] | sort_by(.created_at) | .[-1].id')

          if [ -z "$EXISTING_VOLUME" ] || [ "$EXISTING_VOLUME" == "null" ]; then
            echo "üì¶ Volume belum ada, membuat baru di region SIN..."
            NEW_VOLUME=$(flyctl volumes create film_volume --size 5 --region sin --yes | awk '/ID:/ {print $2}')
            echo "VOLUME_ID=$NEW_VOLUME" >> $GITHUB_ENV
            sleep 10  # Tunggu agar volume benar-benar tersedia
          else
            echo "‚úÖ Volume ditemukan: $EXISTING_VOLUME"
            echo "VOLUME_ID=$EXISTING_VOLUME" >> $GITHUB_ENV
          fi


      - name: Deploy App to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          FLY_APP_NAME: ${{ secrets.FLY_APP_NAME }}
          VOLUME_ID: ${{ env.VOLUME_ID }}
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          
          echo "üöÄ Deploying to Fly.io..."
          flyctl deploy --remote-only --strategy immediate --regions sin

      - name: Restart Fly.io App
        env:
          FLY_APP_NAME: ${{ secrets.FLY_APP_NAME }}
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"

          if [ -z "$FLY_APP_NAME" ]; then
            echo "‚ùå FLY_APP_NAME tidak ditemukan!"
            exit 1
          fi

          echo "üîç Mencari Machine ID untuk aplikasi $FLY_APP_NAME..."
          MACHINE_ID=$(flyctl machines list --app "$FLY_APP_NAME" --json | jq -r '.[0].id')

          if [ -z "$MACHINE_ID" ] || [ "$MACHINE_ID" == "null" ]; then
            echo "‚ùå Tidak ada mesin yang ditemukan untuk aplikasi ini!"
            exit 1
          fi

          echo "üîÑ Mengecek status mesin $MACHINE_ID..."
          MACHINE_STATUS=$(flyctl machines list --app "$FLY_APP_NAME" --json | jq -r '.[0].state')

          if [ "$MACHINE_STATUS" == "stopped" ]; then
            echo "‚ñ∂ Mesin dalam status 'stopped', menjalankan start..."
            flyctl machines start "$MACHINE_ID"
          elif [ "$MACHINE_STATUS" == "started" ]; then
            echo "üîÑ Mesin dalam status 'started', melakukan restart..."
            flyctl machines restart "$MACHINE_ID"
          else
            echo "‚ö† Mesin dalam status '$MACHINE_STATUS', tidak bisa direstart!"
          fi



      - name: Send Telegram Notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
               -d "chat_id=${TELEGRAM_CHAT_ID}" \
               -d "text=‚úÖ Deployment sukses! Aplikasi telah diperbarui dan berjalan di Fly.io üöÄ"

      - name: Schedule Volume Check
        env:
          FLY_APP_NAME: ${{ secrets.FLY_APP_NAME }}
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"

          echo "‚è≥ Mengecek apakah aplikasi memiliki VM yang aktif..."
          ACTIVE_MACHINES=$(flyctl machines list --app "$FLY_APP_NAME" --json | jq -r '[.[] | select(.state == "started")] | length')

          if [ "$ACTIVE_MACHINES" -eq 0 ]; then
            echo "‚ùå Tidak ada VM aktif! Mencari VM terbaru..."
            NEWEST_MACHINE_ID=$(flyctl machines list --app "$FLY_APP_NAME" --json | jq -r 'sort_by(.created_at) | last | .id')

            if [ -n "$NEWEST_MACHINE_ID" ] && [ "$NEWEST_MACHINE_ID" != "null" ]; then
              echo "‚ñ∂ Menjalankan VM terbaru dengan ID: $NEWEST_MACHINE_ID"
              flyctl machines start "$NEWEST_MACHINE_ID"
              sleep 10  # Tunggu 10 detik agar VM siap
            else
              echo "‚ö† Tidak ada VM yang ditemukan, pengecekan volume dibatalkan!"
              exit 1
            fi
          else
            echo "‚úÖ VM sudah aktif, melanjutkan pengecekan volume..."
          fi

          echo "‚è≥ Menjadwalkan pengecekan volume..."
          flyctl ssh console --command "bash /scripts/extend_volume.sh"


