name: Deploy to Fly.io
on:
  push:
    branches:
      - main

jobs:
  cleanup-old-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.HAPUS_REPO_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 1

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          echo 'export FLYCTL_INSTALL="/home/runner/.fly"' >> ~/.bashrc
          echo 'export PATH="$FLYCTL_INSTALL/bin:$PATH"' >> ~/.bashrc
          source ~/.bashrc

          curl https://rclone.org/install.sh | sudo bash
          sudo apt-get update # sudo apt-get install -y jq gh docker.io
          
          # Hapus containerd jika ada konflik
	  if dpkg -l | grep -q "^ii  containerd "; then
	    echo "‚ö†Ô∏è  Menghapus package containerd untuk menghindari konflik..."
	    sudo apt-get remove -y containerd
	  fi

	  # Install paket yang diperlukan
	  sudo apt-get install -y jq gh

      - name: Authenticate Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          export FLY_ACCESS_TOKEN="${{ secrets.FLY_API_TOKEN }}"
          echo "FLY_ACCESS_TOKEN=${{ secrets.FLY_API_TOKEN }}" >> $GITHUB_ENV
          flyctl auth whoami || flyctl auth login --access-token "${{ secrets.FLY_API_TOKEN }}"

      - name: Clean Up Unused Volumes (Force Delete)
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"

          echo "üóëÔ∏è  Menghapus volume yang tidak terpakai secara paksa..."
          flyctl volumes list --json | jq -r '.[] | select(.attached_machine_id == null and .state == "created") | .id' | while read vol; do
            if [ ! -z "$vol" ]; then
              echo "üóëÔ∏è  Menghapus volume: $vol secara paksa"
              flyctl volumes delete $vol --yes
            fi
          done

      - name: Ensure Volume Exists
        id: check_volume
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"

          EXISTING_VOLUME=$(flyctl volumes list --json | jq -r '[.[] | select(.name=="film_volume") | sort_by(.created_at)] | last | .id // empty')

          if [ -z "$EXISTING_VOLUME" ]; then
            echo "üì¶ Volume belum ada, membuat baru di region SIN..."
            NEW_VOLUME=$(flyctl volumes create film_volume --size 5 --region sin --yes | awk '/ID:/ {print $2}')
            echo "VOLUME_ID=$NEW_VOLUME" >> $GITHUB_ENV
            sleep 10  # Tunggu agar volume benar-benar tersedia
          else
            echo "‚úÖ Volume sudah ada: $EXISTING_VOLUME"
            echo "VOLUME_ID=$EXISTING_VOLUME" >> $GITHUB_ENV
          fi

      - name: Check Existing Machine
        id: check_machine
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"

          EXISTING_MACHINE=$(flyctl machines list --json | jq -r '.[0].id // empty')

          if [ -n "$EXISTING_MACHINE" ]; then
            echo "‚úÖ Mesin ditemukan: $EXISTING_MACHINE"
            echo "MACHINE_ID=$EXISTING_MACHINE" >> $GITHUB_ENV
          else
            echo "üöÄ Tidak ada mesin, akan membuat baru..."
            echo "MACHINE_ID=" >> $GITHUB_ENV
          fi

      - name: Build & Push Docker Image
        run: |
          echo "üîÑ Building Docker image..."
          docker build -t registry.fly.io/$FLY_APP_NAME:latest .
          
          echo "üîÑ Pushing image ke Fly.io registry..."
          docker push registry.fly.io/$FLY_APP_NAME:latest

      - name: Deploy or Update App
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          FLY_APP_NAME: ${{ secrets.FLY_APP_NAME }}
          RPC_SECRET: ${{ secrets.RPC_SECRET }}
          RCLONE_ACCESS_TOKEN: ${{ secrets.RCLONE_ACCESS_TOKEN }}
          RCLONE_REFRESH_TOKEN: ${{ secrets.RCLONE_REFRESH_TOKEN }}
          FLY_ACCESS_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          MACHINE_ID: ${{ env.MACHINE_ID }}
          VOLUME_ID: ${{ env.VOLUME_ID }}
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"

          if [ -n "$MACHINE_ID" ]; then
            echo "üîÑ Mesin sudah ada, melakukan update..."
            flyctl deploy --remote-only --strategy immediate --regions sin
          else
            echo "üöÄ Membuat mesin baru di SIN..."
            sleep 5  # Tunggu agar volume tersedia
            
            flyctl machine run registry.fly.io/$FLY_APP_NAME:latest \
              --app $FLY_APP_NAME \
              --region sin \
              --volume "$VOLUME_ID:/film" \
              --metadata fly_platform=machines \
              --vm-size shared-cpu-1x \
              --restart always
          fi

      - name: Restart App After Update
        if: env.MACHINE_ID != ''
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          
          echo "üîÑ Restarting Fly.io Machine"
          flyctl machines restart --app $FLY_APP_NAME --select

      - name: Ensure App IP is Allocated
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          
          EXISTING_IP=$(flyctl ips list --json | jq -r '.[0].address // empty')

          if [ -z "$EXISTING_IP" ]; then
            echo "üåç Menambahkan IP publik untuk aplikasi..."
            flyctl ips allocate-v4
            flyctl ips allocate-v6
          else
            echo "‚úÖ IP sudah ada: $EXISTING_IP"
          fi

      - name: Start Telegram Bot
        run: nohup python3 /app/bot/bot.py & 
        
      - name: Send Telegram Notification
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
               -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
               -d "text=‚úÖ Deployment sukses! Aplikasi telah diperbarui dan berjalan di Fly.io üöÄ"

      - name: Wait for Fly.io machine to be ready
        run: sleep 20  # Tunggu 20 detik sebelum SSH

      - name: Schedule Volume Check
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          flyctl ssh console --command "bash /scripts/extend_volume.sh"
