name: Deploy to Fly.io
on:
  push:
    branches:
      - main

jobs:
  cleanup-old-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.HAPUS_REPO_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 1

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          echo 'export FLYCTL_INSTALL="/home/runner/.fly"' >> ~/.bashrc
          echo 'export PATH="$FLYCTL_INSTALL/bin:$PATH"' >> ~/.bashrc
          source ~/.bashrc
          
          curl https://rclone.org/install.sh | sudo bash
          sudo apt-get update && sudo apt-get install -y jq gh

      - name: Authenticate Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          export FLY_ACCESS_TOKEN="${{ secrets.FLY_API_TOKEN }}"
          echo "FLY_ACCESS_TOKEN=${{ secrets.FLY_API_TOKEN }}" >> $GITHUB_ENV
          flyctl auth whoami || flyctl auth login --access-token "${{ secrets.FLY_API_TOKEN }}"

      - name: Ensure Volume Exists (or Attach Existing)
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"

          # Cek apakah volume sudah ada
          EXISTING_VOLUME=$(flyctl volumes list --json | jq -r '.[] | select(.Name=="film_volume") | .ID')

          if [ -z "$EXISTING_VOLUME" ]; then
            echo "ðŸ“¦ Volume belum ada, membuat baru di region SIN..."
            flyctl volumes create film_volume --size 10 --region sin --yes
            sleep 5
          else
            echo "âœ… Volume sudah ada: $EXISTING_VOLUME"
          fi

      - name: Deploy or Update App
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          FLY_APP_NAME: ${{ secrets.FLY_APP_NAME }}
          RPC_SECRET: ${{ secrets.RPC_SECRET }}
          RCLONE_ACCESS_TOKEN: ${{ secrets.RCLONE_ACCESS_TOKEN }}
          RCLONE_REFRESH_TOKEN: ${{ secrets.RCLONE_REFRESH_TOKEN }}
          FLY_ACCESS_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"

          # Cek apakah aplikasi sudah ada
          APP_EXISTS=$(flyctl apps list --json | jq -r --arg APP "$FLY_APP_NAME" '.[] | select(.Name==$APP) | .Name')

          if [ -z "$APP_EXISTS" ]; then
            echo "ðŸš€ Aplikasi belum ada, melakukan deploy pertama kali..."
            flyctl deploy --remote-only --regions sin
          else
            echo "ðŸ”„ Aplikasi sudah ada, melakukan update..."
            flyctl deploy --remote-only --regions sin --strategy immediate
          fi

      - name: Restart App After Update
        run: |
          source ~/.bashrc
          echo "ðŸ”„ Restarting Fly.io App"
          flyctl machines restart --app $FLY_APP_NAME

      - name: Start Telegram Bot
        run: nohup python3 /app/bot/bot.py & 
        
      - name: Send Telegram Notification
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
               -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
               -d "text=âœ… Deployment sukses! Aplikasi telah diperbarui dan berjalan di Fly.io ðŸš€"

      - name: Wait for Fly.io machine to be ready
        run: sleep 20  # Tunggu 20 detik sebelum SSH

      - name: Schedule Volume Check
        run: |
          source ~/.bashrc
          /home/runner/.fly/bin/flyctl ssh console --command "bash /scripts/extend_volume.sh"
