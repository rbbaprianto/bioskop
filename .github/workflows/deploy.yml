name: Deploy to Fly.io

on:
  push:
    branches:
      - main

jobs:
  # 1Ô∏è‚É£ Hapus Workflow Lama
  cleanup-old-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.HAPUS_REPO_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 1

  # 2Ô∏è‚É£ Install Dependencies
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          set -e
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          echo 'export FLYCTL_INSTALL="/home/runner/.fly"' >> ~/.bashrc
          echo 'export PATH="$FLYCTL_INSTALL/bin:$PATH"' >> ~/.bashrc
          source ~/.bashrc
          
          curl https://rclone.org/install.sh | sudo bash
          sudo apt-get update && sudo apt-get install -y jq gh docker.io

  # 3Ô∏è‚É£ Build & Push Docker Image
  build-and-push:
    needs: install-dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Authenticate with Fly.io Registry
        run: |
          echo "${{ secrets.FLY_API_TOKEN }}" | docker login registry.fly.io -u "x" --password-stdin
          
      - name: Debugging - Check File in Image
        run: |
          docker build -t test-image .
          docker run --rm test-image ls -lah /app/

      - name: Build & Push Docker Image
        env:
          FLY_APP_NAME: ${{ secrets.FLY_APP_NAME }}
        run: |
          set -e
          docker build -t registry.fly.io/$FLY_APP_NAME:latest .
          docker push registry.fly.io/$FLY_APP_NAME:latest

  # 4Ô∏è‚É£ Deploy ke Fly.io
  deploy-to-flyio:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Install Flyctl
        run: |
          set -e
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          echo 'export FLYCTL_INSTALL="/home/runner/.fly"' >> ~/.bashrc
          echo 'export PATH="$FLYCTL_INSTALL/bin:$PATH"' >> ~/.bashrc
          source ~/.bashrc

      - name: Authenticate Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          set -e
          export FLY_ACCESS_TOKEN="${{ secrets.FLY_API_TOKEN }}"
          flyctl auth whoami || flyctl auth login --access-token "${{ secrets.FLY_API_TOKEN }}"

      - name: Ensure Volume Exists
        id: check-volume
        run: |
          set -e
          EXISTING_VOLUME=$(flyctl volumes list --json | jq -r '.[] | select(.name=="film_volume") | sort_by(.created_at) | last | .id')
          if [ -z "$EXISTING_VOLUME" ]; then
            echo "üì¶ Volume belum ada, membuat baru di region SIN..."
            NEW_VOLUME=$(flyctl volumes create film_volume --size 5 --region sin --yes | awk '/ID:/ {print $2}')
            echo "VOLUME_ID=$NEW_VOLUME" >> $GITHUB_ENV
            sleep 10
          else
            echo "‚úÖ Volume sudah ada: $EXISTING_VOLUME"
            echo "VOLUME_ID=$EXISTING_VOLUME" >> $GITHUB_ENV
          fi

      - name: Deploy App to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          FLY_APP_NAME: ${{ secrets.FLY_APP_NAME }}
          VOLUME_ID: ${{ env.VOLUME_ID }}
        run: |
          set -e
          echo "üöÄ Deploying to Fly.io..."
          flyctl deploy --remote-only --strategy immediate --regions sin

      - name: Restart Fly.io App
        run: |
          set -e
          echo "üîÑ Restarting Fly.io App"
          MACHINE_ID=$(flyctl machines list --json | jq -r '.[0].id')
          if [ -n "$MACHINE_ID" ]; then
            flyctl machines restart --app ${{ secrets.FLY_APP_NAME }} --select
          else
            echo "‚ùå Tidak ada VM aktif untuk direstart."
          fi

  # 5Ô∏è‚É£ Notifikasi & Penyelesaian
  finish-and-notify:
    needs: deploy-to-flyio
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram Notification
        run: |
          set -e
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
               -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
               -d "text=‚úÖ Deployment sukses! Aplikasi telah diperbarui dan berjalan di Fly.io üöÄ"

      # Untuk sementara task ini dinonaktifkan karena menyebabkan error
      # - name: Schedule Volume Check
      #   run: |
      #     set -e
      #     export FLYCTL_INSTALL="/home/runner/.fly"
      #     export PATH="$FLYCTL_INSTALL/bin:$PATH"
      #     flyctl ssh console --command "bash /scripts/extend_volume.sh"
